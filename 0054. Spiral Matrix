class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        vector<vector<int>> direction = {{0,1} , {1,0} , {0,-1} , {-1,0}};
        vector<int> ans;

        int n = matrix.size();
        int m = matrix[0].size();
        int dir = 0;
        int i = 0 , j = 0;
        int n1 = n , m1 = m , n2 = 0 , m2 = 0;


        ans.push_back(matrix[0][0]);
        while(ans.size() < n*m){
            int k = i + direction[dir][0];
            int l = j + direction[dir][1];
            if(k>=n2 && k<n1 && l>=m2 && l<m1){
                ans.push_back(matrix[k][l]);
                i = k; j = l;
            }else{
                dir = (dir+1)%4;
                if(dir == 1){
                    n2++;
                }else if(dir == 2){
                    m1--;
                }else if(dir == 3){
                    n1--;
                }else{
                    m2++;
                }
            }
        }

        return ans;
    }
};
